datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.png"
}

enum Role {
  EMPLOYEE
  FRANCHISEE
  OPERATOR
  MANAGER
}

enum Plan {
  AVEC
  AVECGO
  CROSSX
  PAYMENTS
  PLATAFORMA_HYPERLOCAL
  SALAOVIP
}

enum TicketStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  cpf      String @unique
  address  String
  phone    String
  role     Role
  sales    Sale[]

  franchise Franchise?
  ownerId   String?    @map("owner_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("user")
}

model Franchise {
  id        String     @id @default(uuid())
  name      String
  address   String
  cnpj      String     @unique
  phone     String
  customers Customer[]
  sales     Sale[]
  score     Int        @default(0)
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?    @unique

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("franchise")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  score       Int
  plan        Plan
  customers   Customer[]
  sales       Sale[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("product")
}

model Customer {
  id          String     @id @default(uuid())
  name        String
  cnpj        String?    @unique
  address     String
  phone       String
  franchise   Franchise? @relation(fields: [franchiseId], references: [id], onDelete: Cascade)
  franchiseId String?
  sales       Sale[]
  products    Product[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("customer")
}

model Sale {
  id          String     @id @default(uuid())
  description String     @default("")
  product     Product?   @relation(fields: [productId], references: [id])
  productId   String?
  customer    Customer?  @relation(fields: [customerId], references: [id])
  customerId  String?
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
  franchise   Franchise? @relation(fields: [franchiseId], references: [id])
  franchiseId String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("sale")
}

model Ticket {
  id          String       @id @default(uuid())
  description String
  status      TicketStatus
  operatorId  String?
  franchiseId String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("ticket")
}
